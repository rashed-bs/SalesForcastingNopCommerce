@using Microsoft.AspNetCore.Routing;
@model ProductGroupModel
<div class="card-body">
    <p>
        @T("Admin.Catalog.Products.RelatedProducts.Hint")
    </p>
    @if (Model.Id > 0)
    {
        <div class="card card-default">
            <div class="card-body">

            @await Html.PartialAsync("Table", new DataTablesModel
            {
            Name = "related-group-products-grid",
            UrlRead = new DataUrl("RelatedProductList", "ProductGroup", new RouteValueDictionary { [nameof(Model.RelatedProductGroupSearchModel.ProductGroupId)] = Model.RelatedProductGroupSearchModel.ProductGroupId }),
            UrlDelete = new DataUrl("RelatedProductDelete", "ProductGroup", null),
            UrlUpdate = new DataUrl("RelatedProductUpdate", "ProductGroup", null),
            Length = Model.RelatedProductGroupSearchModel.PageSize,
            LengthMenu = Model.RelatedProductGroupSearchModel.AvailablePageSizes,
            ColumnCollection = new List<ColumnProperty>
            {
            new ColumnProperty(nameof(RelatedProductGroupModel.Product2Name))
            {
            Title = T("Admin.Catalog.Products.RelatedProducts.Fields.Product").Text
            },
            new ColumnProperty(nameof(RelatedProductGroupModel.DisplayOrder))
            {
            Title = T("Admin.Catalog.Products.RelatedProducts.Fields.DisplayOrder").Text,
            Width = "150",
            ClassName = NopColumnClassDefaults.CenterAll,
            Editable = true,
            EditType = EditType.Number
            },
            new ColumnProperty(nameof(RelatedProductGroupModel.ProductId2))
            {
            Title = T("Admin.Common.View").Text,
            Width = "150",
            ClassName = NopColumnClassDefaults.Button,
            Render = new RenderButtonView(new DataUrl("~/Admin/Product/Edit/", nameof(RelatedProductGroupModel.Product2Name)))
            },
            new ColumnProperty(nameof(RelatedProductGroupModel.Id))
            {
            Title = T("Admin.Common.Edit").Text,
            Width = "200",
            ClassName =  NopColumnClassDefaults.Button,
            Render = new RenderButtonsInlineEdit()
            },
            new ColumnProperty(nameof(RelatedProductGroupModel.Id))
            {
            Title = T("Admin.Common.Delete").Text,
            Width = "100",
            Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
            ClassName = NopColumnClassDefaults.Button
            }
            }
            })
            </div>
            <div class="card-footer">
                <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "ProductGroup", new {productGroupId = Model.Id, btnId = "btnRefreshRelatedProducts", formId = "product-forcast-form"}))', 800, 800, true); return false;">
                    @T("Admin.Catalog.Products.RelatedProducts.AddNew")
                </button>
                <button type="submit" id="btnRefreshRelatedProducts" style="display: none"></button>
                <script>
                    $(document).ready(function () {
                        $('#btnRefreshRelatedProducts').click(function () {
                            //refresh grid
                            updateTable('#related-group-products-grid');

                            //return false to don't reload a page
                            return false;
                        });
                    });
                </script>
            </div>
        </div>
    }
    else
    {
        <div class="card card-default">
            <div class="card-body">
                @T("Admin.Catalog.Products.RelatedProducts.SaveBeforeEdit")
            </div>
        </div>
    }
</div>